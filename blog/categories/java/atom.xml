<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Eric Prunier]]></title>
  <link href="http://eprunier.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://eprunier.github.io/"/>
  <updated>2013-07-09T11:21:47+02:00</updated>
  <id>http://eprunier.github.io/</id>
  <author>
    <name><![CDATA[Eric Prunier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JVM et proxy réseau]]></title>
    <link href="http://eprunier.github.io/blog/2013/06/29/jvm-et-proxy-reseau/"/>
    <updated>2013-06-29T23:19:00+02:00</updated>
    <id>http://eprunier.github.io/blog/2013/06/29/jvm-et-proxy-reseau</id>
    <content type="html"><![CDATA[<p>Paramètres de la JVM à positionner lorsque le traffic réseau doit passer par un proxy :</p>

<ul>
<li>http.proxyHost</li>
<li>http.proxyPort</li>
<li>https.proxyHost</li>
<li>https.proxyPort</li>
<li>http.nonProxyHosts : liste d’hôtes séparés par un &ldquo;|&rdquo; (les wildcards sont autorisés)</li>
</ul>


<p><strong>Exemple :</strong> -Dhttp.proxyHost=example.com -Dhttp.proxyPort=8080 -Dhttp.nonProxyHosts=localhost|192.168.*</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requêtes HTTPS en Java via un proxy et sans vérification du hostname]]></title>
    <link href="http://eprunier.github.io/blog/2013/06/05/requetes-https-en-java-via-un-proxy-et-sans-verification-du-hostname/"/>
    <updated>2013-06-05T23:08:00+02:00</updated>
    <id>http://eprunier.github.io/blog/2013/06/05/requetes-https-en-java-via-un-proxy-et-sans-verification-du-hostname</id>
    <content type="html"><![CDATA[<p>Création d’un client permettant d’effectuer des requêtes HTTP/HTTPS via un proxy.
Pour les requête HTTPS, ce client autorise la connection même si le hostname du
serveur ne correspond pas aux données du certificat SSL (par exemple dans le cas
d’un certificat de test).</p>

<p>Ce code utilise Apache HttpComponents.</p>

<p>``` java
import javax.net.ssl.SSLContext;</p>

<p>import org.apache.http.HttpHost;
import org.apache.http.client.HttpClient;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;</p>

<p>public class SSLUtils {</p>

<p>  public static void main(String[] args) throws Exception {</p>

<pre><code>// Setup HTTP scheme
Scheme httpScheme = new Scheme("http", 80, PlainSocketFactory.getSocketFactory());

// Setup HTTPS scheme
SSLContext sslcontext = SSLContext.getInstance("TLS");
sslcontext.init(null, null, null);
SSLSocketFactory sf = new SSLSocketFactory(sslcontext, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
Scheme httpsScheme = new Scheme("https", 443, sf);

// Create registry and add schemes
SchemeRegistry schemeRegistry = new SchemeRegistry();
schemeRegistry.register(httpScheme);
schemeRegistry.register(httpsScheme);

// Create HTTP client
final ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(schemeRegistry);
final HttpClient client = new DefaultHttpClient(cm);

// Setup HTTP proxy
final String proxyHost = "http://proxy.example.com";
final int proxyPort = 12345;
final HttpHost proxy = new HttpHost(proxyHost, proxyPort);
client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);

// Now we can use client to send requests....
</code></pre>

<p>  }
}
```</p>
]]></content>
  </entry>
  
</feed>
